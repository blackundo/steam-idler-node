<div class="min-h-screen bg-gradient-to-br from-blue-900 via-purple-900 to-indigo-900 flex items-center justify-center p-4">
    <div class="w-full max-w-md">
        <!-- Steam Guard Mobile Style Container -->
        <div class="backdrop-blur-xl bg-white/10 rounded-3xl border border-white/20 shadow-2xl p-8 animate-fade-in">
            <!-- Header -->
            <div class="flex justify-between items-center mb-8">
                <div class="flex items-center space-x-3">
                    <div class="w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-600 rounded-xl flex items-center justify-center">
                        <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"></path>
                        </svg>
                    </div>
                    <div>
                        <h2 class="text-2xl font-bold text-white">Steam Guard</h2>
                        <p class="text-white/60 text-sm">Mobile Authenticator</p>
                    </div>
                </div>
                <a href="/users" class="text-blue-300 hover:text-blue-200 transition-colors duration-300 hover:scale-110 transform">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
                    </svg>
                </a>
            </div>
            
            <!-- User Info -->
            <div class="bg-white/5 backdrop-blur-sm rounded-2xl p-4 mb-6 border border-white/10">
                <div class="flex items-center space-x-3">
                    <div class="w-12 h-12 bg-gradient-to-r from-green-400 to-blue-500 rounded-full flex items-center justify-center">
                        <span class="text-white font-bold text-lg"><%= user.username.charAt(0).toUpperCase() %></span>
                    </div>
                    <div>
                        <p class="text-white/80 text-sm">Username</p>
                        <p class="text-white font-semibold"><%= user.username %></p>
                    </div>
                </div>
            </div>
            
            <!-- Code Display -->
            <div class="bg-gradient-to-r from-blue-500/20 to-purple-500/20 backdrop-blur-sm rounded-2xl p-6 mb-6 border border-white/20">
                <p class="text-white/80 text-sm mb-3 text-center">Mã xác thực</p>
                <div class="flex items-center justify-center space-x-4">
                    <div class="bg-white/10 backdrop-blur-sm rounded-xl p-4 border border-white/20">
                        <span id="code" class="text-3xl font-mono text-white font-bold tracking-wider"><%= code %></span>
                    </div>
                    <button id="copyBtn" class="bg-gradient-to-r from-blue-500 to-purple-600 text-white px-4 py-3 rounded-xl hover:from-blue-600 hover:to-purple-700 transform hover:scale-105 transition-all duration-300 shadow-lg flex items-center space-x-2">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
                        </svg>
                        <span>Copy</span>
                    </button>
                </div>
            </div>
            
            <!-- Timer -->
            <div class="bg-gradient-to-r from-yellow-500/20 to-orange-500/20 backdrop-blur-sm rounded-2xl p-4 mb-6 border border-white/20">
                <div class="flex items-center justify-center space-x-3">
                    <svg class="w-5 h-5 text-yellow-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                    <p class="text-white/80 text-sm">Thời gian còn lại:</p>
                    <span id="timer" class="text-2xl font-mono text-white font-bold"><%= timeLeft %></span>
                    <span class="text-white/60 text-sm">giây</span>
                </div>
            </div>
            
            <!-- Action Button -->
            <div class="text-center">
                <button onclick="location.reload()" 
                        class="bg-gradient-to-r from-green-500 to-emerald-600 text-white px-8 py-4 rounded-xl font-semibold hover:from-green-600 hover:to-emerald-700 transform hover:scale-105 transition-all duration-300 shadow-lg flex items-center justify-center space-x-2 mx-auto">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                    </svg>
                    <span>Làm mới</span>
                </button>
            </div>
        </div>
    </div>
</div>

<script>
    let remainingTime = <%= timeLeft %>;
    const timerElement = document.getElementById('timer');
    const codeElement = document.getElementById('code');
    const copyBtn = document.getElementById('copyBtn');
    
    function copyCode() {
        const code = codeElement.textContent;
        
        // Fallback cho các trình duyệt cũ
        if (navigator.clipboard && window.isSecureContext) {
            // Sử dụng Clipboard API hiện đại
            navigator.clipboard.writeText(code).then(() => {
                showCopySuccess();
            }).catch(err => {
                console.error('Lỗi copy:', err);
                fallbackCopyTextToClipboard(code);
            });
        } else {
            // Fallback cho HTTP hoặc trình duyệt cũ
            fallbackCopyTextToClipboard(code);
        }
    }
    
    function fallbackCopyTextToClipboard(text) {
        const textArea = document.createElement("textarea");
        textArea.value = text;
        textArea.style.top = "0";
        textArea.style.left = "0";
        textArea.style.position = "fixed";
        document.body.appendChild(textArea);
        textArea.focus();
        textArea.select();
        
        try {
            const successful = document.execCommand('copy');
            if (successful) {
                showCopySuccess();
            } else {
                alert('Không thể copy code!');
            }
        } catch (err) {
            console.error('Lỗi copy:', err);
            alert('Không thể copy code!');
        }
        
        document.body.removeChild(textArea);
    }
    
    function showCopySuccess() {
        const originalText = copyBtn.innerHTML;
        copyBtn.innerHTML = '<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path></svg><span>Copied!</span>';
        copyBtn.classList.remove('from-blue-500', 'to-purple-600', 'hover:from-blue-600', 'hover:to-purple-700');
        copyBtn.classList.add('from-green-500', 'to-green-600');
        
        setTimeout(() => {
            copyBtn.innerHTML = originalText;
            copyBtn.classList.remove('from-green-500', 'to-green-600');
            copyBtn.classList.add('from-blue-500', 'to-purple-600', 'hover:from-blue-600', 'hover:to-purple-700');
        }, 2000);
    }
    
    // Thêm event listener
    copyBtn.addEventListener('click', copyCode);
    
    function updateTimer() {
        if (remainingTime > 0) {
            timerElement.textContent = remainingTime;
            remainingTime--;
            setTimeout(updateTimer, 1000);
        } else {
            timerElement.textContent = '0';
            timerElement.classList.add('text-red-400', 'animate-pulse');
            // Tự động reload sau 1 giây
            setTimeout(() => {
                location.reload();
            }, 1000);
        }
    }
    
    // Bắt đầu đếm ngược
    updateTimer();
</script>

<style>
@keyframes fade-in {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
}

.animate-fade-in {
    animation: fade-in 0.6s ease-out;
}

/* Custom scrollbar */
::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: rgba(255, 255, 255, 0.1);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgba(255, 255, 255, 0.3);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgba(255, 255, 255, 0.5);
}
</style> 